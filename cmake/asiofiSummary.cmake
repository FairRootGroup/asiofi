################################################################################
# Copyright (C) 2018-2021 GSI Helmholtzzentrum fuer Schwerionenforschung GmbH  #
#                                                                              #
#              This software is distributed under the terms of the             #
#              GNU Lesser General Public Licence (LGPL) version 3,             #
#                  copied verbatim in the file "LICENSE"                       #
################################################################################

include_guard(GLOBAL)

include(FairCMakeModules)
include(FairFormattedOutput)
include(FairSummary)

macro(asiofi_summary_components)
  message(STATUS "  ")
  message(STATUS "  ${Cyan}COMPONENT  BUILT?  INFO${CR}")
  if(BUILD_CORE)
    set(core_summary "${BGreen}YES${CR}")
  else()
    set(core_summary "${BRed} NO${CR}")
  endif()
  message(STATUS "  ${BWhite}core${CR}        ${core_summary}")
  if(BUILD_TESTING)
    set(tests_summary "${BGreen}YES${CR}    (disable with ${BMagenta}-DBUILD_TESTING=OFF${CR})")
  else()
    set(tests_summary "${BRed} NO${CR}    (default, enable with ${BMagenta}-DBUILD_TESTING=ON${CR})")
  endif()
  message(STATUS "  ${BWhite}tests${CR}       ${tests_summary}")
endmacro()

macro(asiofi_summary_install_prefix)
  message(STATUS "  ")
  message(STATUS "  ${Cyan}INSTALL PREFIX${CR}     ${BGreen}${CMAKE_INSTALL_PREFIX}${CR} (change with ${BMagenta}-DCMAKE_INSTALL_PREFIX=...${CR})")
endmacro()

if(PROJECT_PACKAGE_DEPENDENCIES)
  foreach(dep IN LISTS PROJECT_PACKAGE_DEPENDENCIES)
    string(TOUPPER ${dep} dep_upper)
    if(${dep}_BUNDLED)
      set(${dep}_PREFIX "<bundled>")
    elseif(${dep} STREQUAL Boost)
      if(TARGET Boost::headers)
        get_target_property(boost_include Boost::headers INTERFACE_INCLUDE_DIRECTORIES)
      else()
        get_target_property(boost_include Boost::boost INTERFACE_INCLUDE_DIRECTORIES)
      endif()
      get_filename_component(Boost_PREFIX ${boost_include}/.. ABSOLUTE)
      unset(boost_include)
    elseif(${dep} STREQUAL Doxygen)
      get_target_property(doxygen_bin Doxygen::doxygen INTERFACE_LOCATION)
      get_filename_component(Doxygen_PREFIX ${doxygen_bin} DIRECTORY)
      get_filename_component(Doxygen_PREFIX ${Doxygen_PREFIX}/.. ABSOLUTE)
      unset(doxygen_bin)
    elseif(${dep} STREQUAL benchmark)
      get_target_property(benchmark_lib benchmark::benchmark INTERFACE_LOCATION)
      get_filename_component(benchmark_PREFIX ${benchmark_lib} DIRECTORY)
      get_filename_component(benchmark_PREFIX ${benchmark_PREFIX}/.. ABSOLUTE)
      unset(benchmark_lib)
    elseif(NOT ${dep}_PREFIX)
      # try to guess
      if(TARGET ${dep}::${dep})
        get_target_property(${dep}_include ${dep}::${dep} INTERFACE_INCLUDE_DIRECTORIES)
        get_filename_component(${dep}_PREFIX ${${dep}_include}/.. ABSOLUTE)
        unset(${dep}_include)
      elseif(${dep}_INCLUDE_DIR)
        get_filename_component(${dep}_PREFIX ${${dep}_INCLUDE_DIR}/.. ABSOLUTE)
      elseif(${dep_upper}_INCLUDE_DIR)
        get_filename_component(${dep}_PREFIX ${${dep_upper}_INCLUDE_DIR}/.. ABSOLUTE)
      elseif(${dep}_INCLUDE_DIRS)
        list(GET ${dep}_INCLUDE_DIRS 0 ${dep}_include)
        get_filename_component(${dep}_PREFIX ${${dep}_include}/.. ABSOLUTE)
        unset(${dep}_include)
      elseif(${dep_upper}_INCLUDE_DIRS)
        list(GET ${dep_upper}_INCLUDE_DIRS 0 ${dep}_include)
        get_filename_component(${dep}_PREFIX ${${dep}_include}/.. ABSOLUTE)
        unset(${dep}_include)
      endif()
    endif()
  endforeach()
endif()
